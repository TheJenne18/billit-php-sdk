<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Billit.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_id' => 'int',
        'reference' => 'string',
        'description' => 'string',
        'amount_excl' => 'double',
        'vat' => 'double',
        'unit' => 'string',
        'group_id' => 'int',
        'group_name' => 'string',
        'amount_incl' => 'double',
        'stock_quantity' => 'double',
        'minimum_billed_quantity' => 'double',
        'buy_excl' => 'double',
        'internal_information' => 'string',
        'created' => '\DateTime',
        'last_modified' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_id' => 'int32',
        'reference' => null,
        'description' => null,
        'amount_excl' => 'double',
        'vat' => 'double',
        'unit' => null,
        'group_id' => 'int32',
        'group_name' => null,
        'amount_incl' => 'double',
        'stock_quantity' => 'double',
        'minimum_billed_quantity' => 'double',
        'buy_excl' => 'double',
        'internal_information' => null,
        'created' => 'date-time',
        'last_modified' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_id' => 'ProductID',
        'reference' => 'Reference',
        'description' => 'Description',
        'amount_excl' => 'AmountExcl',
        'vat' => 'VAT',
        'unit' => 'Unit',
        'group_id' => 'GroupID',
        'group_name' => 'GroupName',
        'amount_incl' => 'AmountIncl',
        'stock_quantity' => 'StockQuantity',
        'minimum_billed_quantity' => 'MinimumBilledQuantity',
        'buy_excl' => 'BuyExcl',
        'internal_information' => 'InternalInformation',
        'created' => 'Created',
        'last_modified' => 'LastModified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_id' => 'setProductId',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'amount_excl' => 'setAmountExcl',
        'vat' => 'setVat',
        'unit' => 'setUnit',
        'group_id' => 'setGroupId',
        'group_name' => 'setGroupName',
        'amount_incl' => 'setAmountIncl',
        'stock_quantity' => 'setStockQuantity',
        'minimum_billed_quantity' => 'setMinimumBilledQuantity',
        'buy_excl' => 'setBuyExcl',
        'internal_information' => 'setInternalInformation',
        'created' => 'setCreated',
        'last_modified' => 'setLastModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_id' => 'getProductId',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'amount_excl' => 'getAmountExcl',
        'vat' => 'getVat',
        'unit' => 'getUnit',
        'group_id' => 'getGroupId',
        'group_name' => 'getGroupName',
        'amount_incl' => 'getAmountIncl',
        'stock_quantity' => 'getStockQuantity',
        'minimum_billed_quantity' => 'getMinimumBilledQuantity',
        'buy_excl' => 'getBuyExcl',
        'internal_information' => 'getInternalInformation',
        'created' => 'getCreated',
        'last_modified' => 'getLastModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['amount_excl'] = isset($data['amount_excl']) ? $data['amount_excl'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['amount_incl'] = isset($data['amount_incl']) ? $data['amount_incl'] : null;
        $this->container['stock_quantity'] = isset($data['stock_quantity']) ? $data['stock_quantity'] : null;
        $this->container['minimum_billed_quantity'] = isset($data['minimum_billed_quantity']) ? $data['minimum_billed_quantity'] : null;
        $this->container['buy_excl'] = isset($data['buy_excl']) ? $data['buy_excl'] : null;
        $this->container['internal_information'] = isset($data['internal_information']) ? $data['internal_information'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount_excl
     *
     * @return double
     */
    public function getAmountExcl()
    {
        return $this->container['amount_excl'];
    }

    /**
     * Sets amount_excl
     *
     * @param double $amount_excl amount_excl
     *
     * @return $this
     */
    public function setAmountExcl($amount_excl)
    {
        $this->container['amount_excl'] = $amount_excl;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return double
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param double $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets amount_incl
     *
     * @return double
     */
    public function getAmountIncl()
    {
        return $this->container['amount_incl'];
    }

    /**
     * Sets amount_incl
     *
     * @param double $amount_incl amount_incl
     *
     * @return $this
     */
    public function setAmountIncl($amount_incl)
    {
        $this->container['amount_incl'] = $amount_incl;

        return $this;
    }

    /**
     * Gets stock_quantity
     *
     * @return double
     */
    public function getStockQuantity()
    {
        return $this->container['stock_quantity'];
    }

    /**
     * Sets stock_quantity
     *
     * @param double $stock_quantity stock_quantity
     *
     * @return $this
     */
    public function setStockQuantity($stock_quantity)
    {
        $this->container['stock_quantity'] = $stock_quantity;

        return $this;
    }

    /**
     * Gets minimum_billed_quantity
     *
     * @return double
     */
    public function getMinimumBilledQuantity()
    {
        return $this->container['minimum_billed_quantity'];
    }

    /**
     * Sets minimum_billed_quantity
     *
     * @param double $minimum_billed_quantity minimum_billed_quantity
     *
     * @return $this
     */
    public function setMinimumBilledQuantity($minimum_billed_quantity)
    {
        $this->container['minimum_billed_quantity'] = $minimum_billed_quantity;

        return $this;
    }

    /**
     * Gets buy_excl
     *
     * @return double
     */
    public function getBuyExcl()
    {
        return $this->container['buy_excl'];
    }

    /**
     * Sets buy_excl
     *
     * @param double $buy_excl buy_excl
     *
     * @return $this
     */
    public function setBuyExcl($buy_excl)
    {
        $this->container['buy_excl'] = $buy_excl;

        return $this;
    }

    /**
     * Gets internal_information
     *
     * @return string
     */
    public function getInternalInformation()
    {
        return $this->container['internal_information'];
    }

    /**
     * Sets internal_information
     *
     * @param string $internal_information internal_information
     *
     * @return $this
     */
    public function setInternalInformation($internal_information)
    {
        $this->container['internal_information'] = $internal_information;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


