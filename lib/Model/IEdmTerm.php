<?php
/**
 * IEdmTerm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Billit.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IEdmTerm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IEdmTerm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IEdmTerm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'term_kind' => 'string',
        'schema_element_kind' => 'string',
        'namespace' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'term_kind' => null,
        'schema_element_kind' => null,
        'namespace' => null,
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'term_kind' => 'TermKind',
        'schema_element_kind' => 'SchemaElementKind',
        'namespace' => 'Namespace',
        'name' => 'Name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'term_kind' => 'setTermKind',
        'schema_element_kind' => 'setSchemaElementKind',
        'namespace' => 'setNamespace',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'term_kind' => 'getTermKind',
        'schema_element_kind' => 'getSchemaElementKind',
        'namespace' => 'getNamespace',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TERM_KIND_NONE = 'None';
    const TERM_KIND_TYPE = 'Type';
    const TERM_KIND_VALUE = 'Value';
    const SCHEMA_ELEMENT_KIND_NONE = 'None';
    const SCHEMA_ELEMENT_KIND_TYPE_DEFINITION = 'TypeDefinition';
    const SCHEMA_ELEMENT_KIND__FUNCTION = 'Function';
    const SCHEMA_ELEMENT_KIND_VALUE_TERM = 'ValueTerm';
    const SCHEMA_ELEMENT_KIND_ENTITY_CONTAINER = 'EntityContainer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTermKindAllowableValues()
    {
        return [
            self::TERM_KIND_NONE,
            self::TERM_KIND_TYPE,
            self::TERM_KIND_VALUE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchemaElementKindAllowableValues()
    {
        return [
            self::SCHEMA_ELEMENT_KIND_NONE,
            self::SCHEMA_ELEMENT_KIND_TYPE_DEFINITION,
            self::SCHEMA_ELEMENT_KIND__FUNCTION,
            self::SCHEMA_ELEMENT_KIND_VALUE_TERM,
            self::SCHEMA_ELEMENT_KIND_ENTITY_CONTAINER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['term_kind'] = isset($data['term_kind']) ? $data['term_kind'] : null;
        $this->container['schema_element_kind'] = isset($data['schema_element_kind']) ? $data['schema_element_kind'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTermKindAllowableValues();
        if (!is_null($this->container['term_kind']) && !in_array($this->container['term_kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'term_kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSchemaElementKindAllowableValues();
        if (!is_null($this->container['schema_element_kind']) && !in_array($this->container['schema_element_kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'schema_element_kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets term_kind
     *
     * @return string
     */
    public function getTermKind()
    {
        return $this->container['term_kind'];
    }

    /**
     * Sets term_kind
     *
     * @param string $term_kind term_kind
     *
     * @return $this
     */
    public function setTermKind($term_kind)
    {
        $allowedValues = $this->getTermKindAllowableValues();
        if (!is_null($term_kind) && !in_array($term_kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'term_kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['term_kind'] = $term_kind;

        return $this;
    }

    /**
     * Gets schema_element_kind
     *
     * @return string
     */
    public function getSchemaElementKind()
    {
        return $this->container['schema_element_kind'];
    }

    /**
     * Sets schema_element_kind
     *
     * @param string $schema_element_kind schema_element_kind
     *
     * @return $this
     */
    public function setSchemaElementKind($schema_element_kind)
    {
        $allowedValues = $this->getSchemaElementKindAllowableValues();
        if (!is_null($schema_element_kind) && !in_array($schema_element_kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'schema_element_kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schema_element_kind'] = $schema_element_kind;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


