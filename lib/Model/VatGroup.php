<?php
/**
 * VatGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Billit.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VatGroup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VatGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VatGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ventilation_code' => 'string',
        'vat_percentage' => 'double',
        'total_excl' => 'double',
        'total_vat' => 'double',
        'total_incl' => 'double',
        'mtvh' => 'double',
        'financial_reduction_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ventilation_code' => null,
        'vat_percentage' => 'double',
        'total_excl' => 'double',
        'total_vat' => 'double',
        'total_incl' => 'double',
        'mtvh' => 'double',
        'financial_reduction_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ventilation_code' => 'VentilationCode',
        'vat_percentage' => 'VATPercentage',
        'total_excl' => 'TotalExcl',
        'total_vat' => 'TotalVAT',
        'total_incl' => 'TotalIncl',
        'mtvh' => 'Mtvh',
        'financial_reduction_amount' => 'FinancialReductionAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ventilation_code' => 'setVentilationCode',
        'vat_percentage' => 'setVatPercentage',
        'total_excl' => 'setTotalExcl',
        'total_vat' => 'setTotalVat',
        'total_incl' => 'setTotalIncl',
        'mtvh' => 'setMtvh',
        'financial_reduction_amount' => 'setFinancialReductionAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ventilation_code' => 'getVentilationCode',
        'vat_percentage' => 'getVatPercentage',
        'total_excl' => 'getTotalExcl',
        'total_vat' => 'getTotalVat',
        'total_incl' => 'getTotalIncl',
        'mtvh' => 'getMtvh',
        'financial_reduction_amount' => 'getFinancialReductionAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ventilation_code'] = isset($data['ventilation_code']) ? $data['ventilation_code'] : null;
        $this->container['vat_percentage'] = isset($data['vat_percentage']) ? $data['vat_percentage'] : null;
        $this->container['total_excl'] = isset($data['total_excl']) ? $data['total_excl'] : null;
        $this->container['total_vat'] = isset($data['total_vat']) ? $data['total_vat'] : null;
        $this->container['total_incl'] = isset($data['total_incl']) ? $data['total_incl'] : null;
        $this->container['mtvh'] = isset($data['mtvh']) ? $data['mtvh'] : null;
        $this->container['financial_reduction_amount'] = isset($data['financial_reduction_amount']) ? $data['financial_reduction_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ventilation_code
     *
     * @return string
     */
    public function getVentilationCode()
    {
        return $this->container['ventilation_code'];
    }

    /**
     * Sets ventilation_code
     *
     * @param string $ventilation_code ventilation_code
     *
     * @return $this
     */
    public function setVentilationCode($ventilation_code)
    {
        $this->container['ventilation_code'] = $ventilation_code;

        return $this;
    }

    /**
     * Gets vat_percentage
     *
     * @return double
     */
    public function getVatPercentage()
    {
        return $this->container['vat_percentage'];
    }

    /**
     * Sets vat_percentage
     *
     * @param double $vat_percentage vat_percentage
     *
     * @return $this
     */
    public function setVatPercentage($vat_percentage)
    {
        $this->container['vat_percentage'] = $vat_percentage;

        return $this;
    }

    /**
     * Gets total_excl
     *
     * @return double
     */
    public function getTotalExcl()
    {
        return $this->container['total_excl'];
    }

    /**
     * Sets total_excl
     *
     * @param double $total_excl total_excl
     *
     * @return $this
     */
    public function setTotalExcl($total_excl)
    {
        $this->container['total_excl'] = $total_excl;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return double
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param double $total_vat total_vat
     *
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets total_incl
     *
     * @return double
     */
    public function getTotalIncl()
    {
        return $this->container['total_incl'];
    }

    /**
     * Sets total_incl
     *
     * @param double $total_incl total_incl
     *
     * @return $this
     */
    public function setTotalIncl($total_incl)
    {
        $this->container['total_incl'] = $total_incl;

        return $this;
    }

    /**
     * Gets mtvh
     *
     * @return double
     */
    public function getMtvh()
    {
        return $this->container['mtvh'];
    }

    /**
     * Sets mtvh
     *
     * @param double $mtvh mtvh
     *
     * @return $this
     */
    public function setMtvh($mtvh)
    {
        $this->container['mtvh'] = $mtvh;

        return $this;
    }

    /**
     * Gets financial_reduction_amount
     *
     * @return double
     */
    public function getFinancialReductionAmount()
    {
        return $this->container['financial_reduction_amount'];
    }

    /**
     * Sets financial_reduction_amount
     *
     * @param double $financial_reduction_amount financial_reduction_amount
     *
     * @return $this
     */
    public function setFinancialReductionAmount($financial_reduction_amount)
    {
        $this->container['financial_reduction_amount'] = $financial_reduction_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


