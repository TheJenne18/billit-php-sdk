<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Billit.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'company_id' => 'int',
        'order_pdf' => '\Swagger\Client\Model\File',
        'attachments' => '\Swagger\Client\Model\File[]',
        'order_number' => 'string',
        'customer_id' => 'int',
        'supplier_id' => 'int',
        'counter_party_id' => 'int',
        'customer' => '\Swagger\Client\Model\Party',
        'supplier' => '\Swagger\Client\Model\Party',
        'counter_party' => '\Swagger\Client\Model\Party',
        'order_date' => '\DateTime',
        'expiry_date' => '\DateTime',
        'order_type' => 'string',
        'last_modified' => '\DateTime',
        'created' => '\DateTime',
        'order_direction' => 'string',
        'order_lines' => '\Swagger\Client\Model\OrderLine[]',
        'booking_entries' => '\Swagger\Client\Model\BookingEntry[]',
        'journal' => 'string',
        'order_title' => 'string',
        'payment_discount_percentage' => 'double',
        'payment_discount_amount' => 'double',
        'payment_discount_date' => '\DateTime',
        'vat_groups' => '\Swagger\Client\Model\VatGroup[]',
        'ventilation_code' => 'string',
        'total_excl' => 'double',
        'total_incl' => 'double',
        'total_vat' => 'double',
        'reference' => 'string',
        'tags' => 'string[]',
        'department_id' => 'int',
        'payment_reference' => 'string',
        'about_invoice_number' => 'string',
        'paid' => 'bool',
        'paid_date' => '\DateTime',
        'external_provider_id' => 'string',
        'external_provider' => 'string',
        'external_provider_references' => '\Swagger\Client\Model\ExternalProviderReference[]',
        'comments' => 'string',
        'currency' => 'string',
        'vat_deduction' => 'double',
        'internal_info' => 'string',
        'is_sent' => 'bool',
        'custom_fields' => 'map[string,string]',
        'period_from' => '\DateTime',
        'period_till' => '\DateTime',
        'account_code' => 'int',
        'last_reminder' => '\DateTime',
        'reminders_sent' => 'int',
        'to_pay' => 'double',
        'order_status' => 'string',
        'approval_status' => 'string',
        'overdue' => 'bool',
        'days_overdue' => 'int',
        'fx_rate_to_foreign' => 'double',
        'payment_method' => 'string',
        'delivery_date' => '\DateTime',
        'exported_to_connector' => 'bool',
        'payment_links' => '\Swagger\Client\Model\PaymentLink[]',
        'template_id' => 'int',
        'analytic_cost_bearer' => 'string',
        'analytic_cost_center' => 'string',
        'accountant_verification_needed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'company_id' => 'int32',
        'order_pdf' => null,
        'attachments' => null,
        'order_number' => null,
        'customer_id' => 'int32',
        'supplier_id' => 'int32',
        'counter_party_id' => 'int32',
        'customer' => null,
        'supplier' => null,
        'counter_party' => null,
        'order_date' => 'date-time',
        'expiry_date' => 'date-time',
        'order_type' => null,
        'last_modified' => 'date-time',
        'created' => 'date-time',
        'order_direction' => null,
        'order_lines' => null,
        'booking_entries' => null,
        'journal' => null,
        'order_title' => null,
        'payment_discount_percentage' => 'double',
        'payment_discount_amount' => 'double',
        'payment_discount_date' => 'date-time',
        'vat_groups' => null,
        'ventilation_code' => null,
        'total_excl' => 'double',
        'total_incl' => 'double',
        'total_vat' => 'double',
        'reference' => null,
        'tags' => null,
        'department_id' => 'int32',
        'payment_reference' => null,
        'about_invoice_number' => null,
        'paid' => null,
        'paid_date' => 'date-time',
        'external_provider_id' => null,
        'external_provider' => null,
        'external_provider_references' => null,
        'comments' => null,
        'currency' => null,
        'vat_deduction' => 'double',
        'internal_info' => null,
        'is_sent' => null,
        'custom_fields' => null,
        'period_from' => 'date-time',
        'period_till' => 'date-time',
        'account_code' => 'int32',
        'last_reminder' => 'date-time',
        'reminders_sent' => 'int32',
        'to_pay' => 'double',
        'order_status' => null,
        'approval_status' => null,
        'overdue' => null,
        'days_overdue' => 'int32',
        'fx_rate_to_foreign' => 'double',
        'payment_method' => null,
        'delivery_date' => 'date-time',
        'exported_to_connector' => null,
        'payment_links' => null,
        'template_id' => 'int32',
        'analytic_cost_bearer' => null,
        'analytic_cost_center' => null,
        'accountant_verification_needed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderID',
        'company_id' => 'CompanyID',
        'order_pdf' => 'OrderPDF',
        'attachments' => 'Attachments',
        'order_number' => 'OrderNumber',
        'customer_id' => 'CustomerID',
        'supplier_id' => 'SupplierID',
        'counter_party_id' => 'CounterPartyID',
        'customer' => 'Customer',
        'supplier' => 'Supplier',
        'counter_party' => 'CounterParty',
        'order_date' => 'OrderDate',
        'expiry_date' => 'ExpiryDate',
        'order_type' => 'OrderType',
        'last_modified' => 'LastModified',
        'created' => 'Created',
        'order_direction' => 'OrderDirection',
        'order_lines' => 'OrderLines',
        'booking_entries' => 'BookingEntries',
        'journal' => 'Journal',
        'order_title' => 'OrderTitle',
        'payment_discount_percentage' => 'PaymentDiscountPercentage',
        'payment_discount_amount' => 'PaymentDiscountAmount',
        'payment_discount_date' => 'PaymentDiscountDate',
        'vat_groups' => 'VatGroups',
        'ventilation_code' => 'VentilationCode',
        'total_excl' => 'TotalExcl',
        'total_incl' => 'TotalIncl',
        'total_vat' => 'TotalVAT',
        'reference' => 'Reference',
        'tags' => 'Tags',
        'department_id' => 'DepartmentID',
        'payment_reference' => 'PaymentReference',
        'about_invoice_number' => 'AboutInvoiceNumber',
        'paid' => 'Paid',
        'paid_date' => 'PaidDate',
        'external_provider_id' => 'ExternalProviderID',
        'external_provider' => 'ExternalProvider',
        'external_provider_references' => 'ExternalProviderReferences',
        'comments' => 'Comments',
        'currency' => 'Currency',
        'vat_deduction' => 'VatDeduction',
        'internal_info' => 'InternalInfo',
        'is_sent' => 'IsSent',
        'custom_fields' => 'CustomFields',
        'period_from' => 'PeriodFrom',
        'period_till' => 'PeriodTill',
        'account_code' => 'AccountCode',
        'last_reminder' => 'LastReminder',
        'reminders_sent' => 'RemindersSent',
        'to_pay' => 'ToPay',
        'order_status' => 'OrderStatus',
        'approval_status' => 'ApprovalStatus',
        'overdue' => 'Overdue',
        'days_overdue' => 'DaysOverdue',
        'fx_rate_to_foreign' => 'FXRateToForeign',
        'payment_method' => 'PaymentMethod',
        'delivery_date' => 'DeliveryDate',
        'exported_to_connector' => 'ExportedToConnector',
        'payment_links' => 'PaymentLinks',
        'template_id' => 'TemplateID',
        'analytic_cost_bearer' => 'AnalyticCostBearer',
        'analytic_cost_center' => 'AnalyticCostCenter',
        'accountant_verification_needed' => 'AccountantVerificationNeeded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'company_id' => 'setCompanyId',
        'order_pdf' => 'setOrderPdf',
        'attachments' => 'setAttachments',
        'order_number' => 'setOrderNumber',
        'customer_id' => 'setCustomerId',
        'supplier_id' => 'setSupplierId',
        'counter_party_id' => 'setCounterPartyId',
        'customer' => 'setCustomer',
        'supplier' => 'setSupplier',
        'counter_party' => 'setCounterParty',
        'order_date' => 'setOrderDate',
        'expiry_date' => 'setExpiryDate',
        'order_type' => 'setOrderType',
        'last_modified' => 'setLastModified',
        'created' => 'setCreated',
        'order_direction' => 'setOrderDirection',
        'order_lines' => 'setOrderLines',
        'booking_entries' => 'setBookingEntries',
        'journal' => 'setJournal',
        'order_title' => 'setOrderTitle',
        'payment_discount_percentage' => 'setPaymentDiscountPercentage',
        'payment_discount_amount' => 'setPaymentDiscountAmount',
        'payment_discount_date' => 'setPaymentDiscountDate',
        'vat_groups' => 'setVatGroups',
        'ventilation_code' => 'setVentilationCode',
        'total_excl' => 'setTotalExcl',
        'total_incl' => 'setTotalIncl',
        'total_vat' => 'setTotalVat',
        'reference' => 'setReference',
        'tags' => 'setTags',
        'department_id' => 'setDepartmentId',
        'payment_reference' => 'setPaymentReference',
        'about_invoice_number' => 'setAboutInvoiceNumber',
        'paid' => 'setPaid',
        'paid_date' => 'setPaidDate',
        'external_provider_id' => 'setExternalProviderId',
        'external_provider' => 'setExternalProvider',
        'external_provider_references' => 'setExternalProviderReferences',
        'comments' => 'setComments',
        'currency' => 'setCurrency',
        'vat_deduction' => 'setVatDeduction',
        'internal_info' => 'setInternalInfo',
        'is_sent' => 'setIsSent',
        'custom_fields' => 'setCustomFields',
        'period_from' => 'setPeriodFrom',
        'period_till' => 'setPeriodTill',
        'account_code' => 'setAccountCode',
        'last_reminder' => 'setLastReminder',
        'reminders_sent' => 'setRemindersSent',
        'to_pay' => 'setToPay',
        'order_status' => 'setOrderStatus',
        'approval_status' => 'setApprovalStatus',
        'overdue' => 'setOverdue',
        'days_overdue' => 'setDaysOverdue',
        'fx_rate_to_foreign' => 'setFxRateToForeign',
        'payment_method' => 'setPaymentMethod',
        'delivery_date' => 'setDeliveryDate',
        'exported_to_connector' => 'setExportedToConnector',
        'payment_links' => 'setPaymentLinks',
        'template_id' => 'setTemplateId',
        'analytic_cost_bearer' => 'setAnalyticCostBearer',
        'analytic_cost_center' => 'setAnalyticCostCenter',
        'accountant_verification_needed' => 'setAccountantVerificationNeeded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'company_id' => 'getCompanyId',
        'order_pdf' => 'getOrderPdf',
        'attachments' => 'getAttachments',
        'order_number' => 'getOrderNumber',
        'customer_id' => 'getCustomerId',
        'supplier_id' => 'getSupplierId',
        'counter_party_id' => 'getCounterPartyId',
        'customer' => 'getCustomer',
        'supplier' => 'getSupplier',
        'counter_party' => 'getCounterParty',
        'order_date' => 'getOrderDate',
        'expiry_date' => 'getExpiryDate',
        'order_type' => 'getOrderType',
        'last_modified' => 'getLastModified',
        'created' => 'getCreated',
        'order_direction' => 'getOrderDirection',
        'order_lines' => 'getOrderLines',
        'booking_entries' => 'getBookingEntries',
        'journal' => 'getJournal',
        'order_title' => 'getOrderTitle',
        'payment_discount_percentage' => 'getPaymentDiscountPercentage',
        'payment_discount_amount' => 'getPaymentDiscountAmount',
        'payment_discount_date' => 'getPaymentDiscountDate',
        'vat_groups' => 'getVatGroups',
        'ventilation_code' => 'getVentilationCode',
        'total_excl' => 'getTotalExcl',
        'total_incl' => 'getTotalIncl',
        'total_vat' => 'getTotalVat',
        'reference' => 'getReference',
        'tags' => 'getTags',
        'department_id' => 'getDepartmentId',
        'payment_reference' => 'getPaymentReference',
        'about_invoice_number' => 'getAboutInvoiceNumber',
        'paid' => 'getPaid',
        'paid_date' => 'getPaidDate',
        'external_provider_id' => 'getExternalProviderId',
        'external_provider' => 'getExternalProvider',
        'external_provider_references' => 'getExternalProviderReferences',
        'comments' => 'getComments',
        'currency' => 'getCurrency',
        'vat_deduction' => 'getVatDeduction',
        'internal_info' => 'getInternalInfo',
        'is_sent' => 'getIsSent',
        'custom_fields' => 'getCustomFields',
        'period_from' => 'getPeriodFrom',
        'period_till' => 'getPeriodTill',
        'account_code' => 'getAccountCode',
        'last_reminder' => 'getLastReminder',
        'reminders_sent' => 'getRemindersSent',
        'to_pay' => 'getToPay',
        'order_status' => 'getOrderStatus',
        'approval_status' => 'getApprovalStatus',
        'overdue' => 'getOverdue',
        'days_overdue' => 'getDaysOverdue',
        'fx_rate_to_foreign' => 'getFxRateToForeign',
        'payment_method' => 'getPaymentMethod',
        'delivery_date' => 'getDeliveryDate',
        'exported_to_connector' => 'getExportedToConnector',
        'payment_links' => 'getPaymentLinks',
        'template_id' => 'getTemplateId',
        'analytic_cost_bearer' => 'getAnalyticCostBearer',
        'analytic_cost_center' => 'getAnalyticCostCenter',
        'accountant_verification_needed' => 'getAccountantVerificationNeeded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['order_pdf'] = isset($data['order_pdf']) ? $data['order_pdf'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['counter_party_id'] = isset($data['counter_party_id']) ? $data['counter_party_id'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['counter_party'] = isset($data['counter_party']) ? $data['counter_party'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['order_direction'] = isset($data['order_direction']) ? $data['order_direction'] : null;
        $this->container['order_lines'] = isset($data['order_lines']) ? $data['order_lines'] : null;
        $this->container['booking_entries'] = isset($data['booking_entries']) ? $data['booking_entries'] : null;
        $this->container['journal'] = isset($data['journal']) ? $data['journal'] : null;
        $this->container['order_title'] = isset($data['order_title']) ? $data['order_title'] : null;
        $this->container['payment_discount_percentage'] = isset($data['payment_discount_percentage']) ? $data['payment_discount_percentage'] : null;
        $this->container['payment_discount_amount'] = isset($data['payment_discount_amount']) ? $data['payment_discount_amount'] : null;
        $this->container['payment_discount_date'] = isset($data['payment_discount_date']) ? $data['payment_discount_date'] : null;
        $this->container['vat_groups'] = isset($data['vat_groups']) ? $data['vat_groups'] : null;
        $this->container['ventilation_code'] = isset($data['ventilation_code']) ? $data['ventilation_code'] : null;
        $this->container['total_excl'] = isset($data['total_excl']) ? $data['total_excl'] : null;
        $this->container['total_incl'] = isset($data['total_incl']) ? $data['total_incl'] : null;
        $this->container['total_vat'] = isset($data['total_vat']) ? $data['total_vat'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        $this->container['about_invoice_number'] = isset($data['about_invoice_number']) ? $data['about_invoice_number'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['paid_date'] = isset($data['paid_date']) ? $data['paid_date'] : null;
        $this->container['external_provider_id'] = isset($data['external_provider_id']) ? $data['external_provider_id'] : null;
        $this->container['external_provider'] = isset($data['external_provider']) ? $data['external_provider'] : null;
        $this->container['external_provider_references'] = isset($data['external_provider_references']) ? $data['external_provider_references'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['vat_deduction'] = isset($data['vat_deduction']) ? $data['vat_deduction'] : null;
        $this->container['internal_info'] = isset($data['internal_info']) ? $data['internal_info'] : null;
        $this->container['is_sent'] = isset($data['is_sent']) ? $data['is_sent'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['period_from'] = isset($data['period_from']) ? $data['period_from'] : null;
        $this->container['period_till'] = isset($data['period_till']) ? $data['period_till'] : null;
        $this->container['account_code'] = isset($data['account_code']) ? $data['account_code'] : null;
        $this->container['last_reminder'] = isset($data['last_reminder']) ? $data['last_reminder'] : null;
        $this->container['reminders_sent'] = isset($data['reminders_sent']) ? $data['reminders_sent'] : null;
        $this->container['to_pay'] = isset($data['to_pay']) ? $data['to_pay'] : null;
        $this->container['order_status'] = isset($data['order_status']) ? $data['order_status'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['overdue'] = isset($data['overdue']) ? $data['overdue'] : null;
        $this->container['days_overdue'] = isset($data['days_overdue']) ? $data['days_overdue'] : null;
        $this->container['fx_rate_to_foreign'] = isset($data['fx_rate_to_foreign']) ? $data['fx_rate_to_foreign'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['exported_to_connector'] = isset($data['exported_to_connector']) ? $data['exported_to_connector'] : null;
        $this->container['payment_links'] = isset($data['payment_links']) ? $data['payment_links'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['analytic_cost_bearer'] = isset($data['analytic_cost_bearer']) ? $data['analytic_cost_bearer'] : null;
        $this->container['analytic_cost_center'] = isset($data['analytic_cost_center']) ? $data['analytic_cost_center'] : null;
        $this->container['accountant_verification_needed'] = isset($data['accountant_verification_needed']) ? $data['accountant_verification_needed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id company_id
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets order_pdf
     *
     * @return \Swagger\Client\Model\File
     */
    public function getOrderPdf()
    {
        return $this->container['order_pdf'];
    }

    /**
     * Sets order_pdf
     *
     * @param \Swagger\Client\Model\File $order_pdf order_pdf
     *
     * @return $this
     */
    public function setOrderPdf($order_pdf)
    {
        $this->container['order_pdf'] = $order_pdf;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\File[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\File[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return int
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param int $supplier_id supplier_id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets counter_party_id
     *
     * @return int
     */
    public function getCounterPartyId()
    {
        return $this->container['counter_party_id'];
    }

    /**
     * Sets counter_party_id
     *
     * @param int $counter_party_id counter_party_id
     *
     * @return $this
     */
    public function setCounterPartyId($counter_party_id)
    {
        $this->container['counter_party_id'] = $counter_party_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\Party
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\Party $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return \Swagger\Client\Model\Party
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param \Swagger\Client\Model\Party $supplier supplier
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets counter_party
     *
     * @return \Swagger\Client\Model\Party
     */
    public function getCounterParty()
    {
        return $this->container['counter_party'];
    }

    /**
     * Sets counter_party
     *
     * @param \Swagger\Client\Model\Party $counter_party counter_party
     *
     * @return $this
     */
    public function setCounterParty($counter_party)
    {
        $this->container['counter_party'] = $counter_party;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type order_type
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets order_direction
     *
     * @return string
     */
    public function getOrderDirection()
    {
        return $this->container['order_direction'];
    }

    /**
     * Sets order_direction
     *
     * @param string $order_direction order_direction
     *
     * @return $this
     */
    public function setOrderDirection($order_direction)
    {
        $this->container['order_direction'] = $order_direction;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Swagger\Client\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Swagger\Client\Model\OrderLine[] $order_lines order_lines
     *
     * @return $this
     */
    public function setOrderLines($order_lines)
    {
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets booking_entries
     *
     * @return \Swagger\Client\Model\BookingEntry[]
     */
    public function getBookingEntries()
    {
        return $this->container['booking_entries'];
    }

    /**
     * Sets booking_entries
     *
     * @param \Swagger\Client\Model\BookingEntry[] $booking_entries booking_entries
     *
     * @return $this
     */
    public function setBookingEntries($booking_entries)
    {
        $this->container['booking_entries'] = $booking_entries;

        return $this;
    }

    /**
     * Gets journal
     *
     * @return string
     */
    public function getJournal()
    {
        return $this->container['journal'];
    }

    /**
     * Sets journal
     *
     * @param string $journal journal
     *
     * @return $this
     */
    public function setJournal($journal)
    {
        $this->container['journal'] = $journal;

        return $this;
    }

    /**
     * Gets order_title
     *
     * @return string
     */
    public function getOrderTitle()
    {
        return $this->container['order_title'];
    }

    /**
     * Sets order_title
     *
     * @param string $order_title order_title
     *
     * @return $this
     */
    public function setOrderTitle($order_title)
    {
        $this->container['order_title'] = $order_title;

        return $this;
    }

    /**
     * Gets payment_discount_percentage
     *
     * @return double
     */
    public function getPaymentDiscountPercentage()
    {
        return $this->container['payment_discount_percentage'];
    }

    /**
     * Sets payment_discount_percentage
     *
     * @param double $payment_discount_percentage payment_discount_percentage
     *
     * @return $this
     */
    public function setPaymentDiscountPercentage($payment_discount_percentage)
    {
        $this->container['payment_discount_percentage'] = $payment_discount_percentage;

        return $this;
    }

    /**
     * Gets payment_discount_amount
     *
     * @return double
     */
    public function getPaymentDiscountAmount()
    {
        return $this->container['payment_discount_amount'];
    }

    /**
     * Sets payment_discount_amount
     *
     * @param double $payment_discount_amount payment_discount_amount
     *
     * @return $this
     */
    public function setPaymentDiscountAmount($payment_discount_amount)
    {
        $this->container['payment_discount_amount'] = $payment_discount_amount;

        return $this;
    }

    /**
     * Gets payment_discount_date
     *
     * @return \DateTime
     */
    public function getPaymentDiscountDate()
    {
        return $this->container['payment_discount_date'];
    }

    /**
     * Sets payment_discount_date
     *
     * @param \DateTime $payment_discount_date payment_discount_date
     *
     * @return $this
     */
    public function setPaymentDiscountDate($payment_discount_date)
    {
        $this->container['payment_discount_date'] = $payment_discount_date;

        return $this;
    }

    /**
     * Gets vat_groups
     *
     * @return \Swagger\Client\Model\VatGroup[]
     */
    public function getVatGroups()
    {
        return $this->container['vat_groups'];
    }

    /**
     * Sets vat_groups
     *
     * @param \Swagger\Client\Model\VatGroup[] $vat_groups vat_groups
     *
     * @return $this
     */
    public function setVatGroups($vat_groups)
    {
        $this->container['vat_groups'] = $vat_groups;

        return $this;
    }

    /**
     * Gets ventilation_code
     *
     * @return string
     */
    public function getVentilationCode()
    {
        return $this->container['ventilation_code'];
    }

    /**
     * Sets ventilation_code
     *
     * @param string $ventilation_code ventilation_code
     *
     * @return $this
     */
    public function setVentilationCode($ventilation_code)
    {
        $this->container['ventilation_code'] = $ventilation_code;

        return $this;
    }

    /**
     * Gets total_excl
     *
     * @return double
     */
    public function getTotalExcl()
    {
        return $this->container['total_excl'];
    }

    /**
     * Sets total_excl
     *
     * @param double $total_excl total_excl
     *
     * @return $this
     */
    public function setTotalExcl($total_excl)
    {
        $this->container['total_excl'] = $total_excl;

        return $this;
    }

    /**
     * Gets total_incl
     *
     * @return double
     */
    public function getTotalIncl()
    {
        return $this->container['total_incl'];
    }

    /**
     * Sets total_incl
     *
     * @param double $total_incl total_incl
     *
     * @return $this
     */
    public function setTotalIncl($total_incl)
    {
        $this->container['total_incl'] = $total_incl;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return double
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param double $total_vat total_vat
     *
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return int
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param int $department_id department_id
     *
     * @return $this
     */
    public function setDepartmentId($department_id)
    {
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string $payment_reference payment_reference
     *
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets about_invoice_number
     *
     * @return string
     */
    public function getAboutInvoiceNumber()
    {
        return $this->container['about_invoice_number'];
    }

    /**
     * Sets about_invoice_number
     *
     * @param string $about_invoice_number about_invoice_number
     *
     * @return $this
     */
    public function setAboutInvoiceNumber($about_invoice_number)
    {
        $this->container['about_invoice_number'] = $about_invoice_number;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool $paid paid
     *
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return \DateTime
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param \DateTime $paid_date paid_date
     *
     * @return $this
     */
    public function setPaidDate($paid_date)
    {
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets external_provider_id
     *
     * @return string
     */
    public function getExternalProviderId()
    {
        return $this->container['external_provider_id'];
    }

    /**
     * Sets external_provider_id
     *
     * @param string $external_provider_id external_provider_id
     *
     * @return $this
     */
    public function setExternalProviderId($external_provider_id)
    {
        $this->container['external_provider_id'] = $external_provider_id;

        return $this;
    }

    /**
     * Gets external_provider
     *
     * @return string
     */
    public function getExternalProvider()
    {
        return $this->container['external_provider'];
    }

    /**
     * Sets external_provider
     *
     * @param string $external_provider external_provider
     *
     * @return $this
     */
    public function setExternalProvider($external_provider)
    {
        $this->container['external_provider'] = $external_provider;

        return $this;
    }

    /**
     * Gets external_provider_references
     *
     * @return \Swagger\Client\Model\ExternalProviderReference[]
     */
    public function getExternalProviderReferences()
    {
        return $this->container['external_provider_references'];
    }

    /**
     * Sets external_provider_references
     *
     * @param \Swagger\Client\Model\ExternalProviderReference[] $external_provider_references external_provider_references
     *
     * @return $this
     */
    public function setExternalProviderReferences($external_provider_references)
    {
        $this->container['external_provider_references'] = $external_provider_references;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets vat_deduction
     *
     * @return double
     */
    public function getVatDeduction()
    {
        return $this->container['vat_deduction'];
    }

    /**
     * Sets vat_deduction
     *
     * @param double $vat_deduction vat_deduction
     *
     * @return $this
     */
    public function setVatDeduction($vat_deduction)
    {
        $this->container['vat_deduction'] = $vat_deduction;

        return $this;
    }

    /**
     * Gets internal_info
     *
     * @return string
     */
    public function getInternalInfo()
    {
        return $this->container['internal_info'];
    }

    /**
     * Sets internal_info
     *
     * @param string $internal_info internal_info
     *
     * @return $this
     */
    public function setInternalInfo($internal_info)
    {
        $this->container['internal_info'] = $internal_info;

        return $this;
    }

    /**
     * Gets is_sent
     *
     * @return bool
     */
    public function getIsSent()
    {
        return $this->container['is_sent'];
    }

    /**
     * Sets is_sent
     *
     * @param bool $is_sent is_sent
     *
     * @return $this
     */
    public function setIsSent($is_sent)
    {
        $this->container['is_sent'] = $is_sent;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,string]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,string] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets period_from
     *
     * @return \DateTime
     */
    public function getPeriodFrom()
    {
        return $this->container['period_from'];
    }

    /**
     * Sets period_from
     *
     * @param \DateTime $period_from period_from
     *
     * @return $this
     */
    public function setPeriodFrom($period_from)
    {
        $this->container['period_from'] = $period_from;

        return $this;
    }

    /**
     * Gets period_till
     *
     * @return \DateTime
     */
    public function getPeriodTill()
    {
        return $this->container['period_till'];
    }

    /**
     * Sets period_till
     *
     * @param \DateTime $period_till period_till
     *
     * @return $this
     */
    public function setPeriodTill($period_till)
    {
        $this->container['period_till'] = $period_till;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return int
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param int $account_code account_code
     *
     * @return $this
     */
    public function setAccountCode($account_code)
    {
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets last_reminder
     *
     * @return \DateTime
     */
    public function getLastReminder()
    {
        return $this->container['last_reminder'];
    }

    /**
     * Sets last_reminder
     *
     * @param \DateTime $last_reminder last_reminder
     *
     * @return $this
     */
    public function setLastReminder($last_reminder)
    {
        $this->container['last_reminder'] = $last_reminder;

        return $this;
    }

    /**
     * Gets reminders_sent
     *
     * @return int
     */
    public function getRemindersSent()
    {
        return $this->container['reminders_sent'];
    }

    /**
     * Sets reminders_sent
     *
     * @param int $reminders_sent reminders_sent
     *
     * @return $this
     */
    public function setRemindersSent($reminders_sent)
    {
        $this->container['reminders_sent'] = $reminders_sent;

        return $this;
    }

    /**
     * Gets to_pay
     *
     * @return double
     */
    public function getToPay()
    {
        return $this->container['to_pay'];
    }

    /**
     * Sets to_pay
     *
     * @param double $to_pay to_pay
     *
     * @return $this
     */
    public function setToPay($to_pay)
    {
        $this->container['to_pay'] = $to_pay;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status order_status
     *
     * @return $this
     */
    public function setOrderStatus($order_status)
    {
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return string
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string $approval_status approval_status
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets overdue
     *
     * @return bool
     */
    public function getOverdue()
    {
        return $this->container['overdue'];
    }

    /**
     * Sets overdue
     *
     * @param bool $overdue overdue
     *
     * @return $this
     */
    public function setOverdue($overdue)
    {
        $this->container['overdue'] = $overdue;

        return $this;
    }

    /**
     * Gets days_overdue
     *
     * @return int
     */
    public function getDaysOverdue()
    {
        return $this->container['days_overdue'];
    }

    /**
     * Sets days_overdue
     *
     * @param int $days_overdue days_overdue
     *
     * @return $this
     */
    public function setDaysOverdue($days_overdue)
    {
        $this->container['days_overdue'] = $days_overdue;

        return $this;
    }

    /**
     * Gets fx_rate_to_foreign
     *
     * @return double
     */
    public function getFxRateToForeign()
    {
        return $this->container['fx_rate_to_foreign'];
    }

    /**
     * Sets fx_rate_to_foreign
     *
     * @param double $fx_rate_to_foreign fx_rate_to_foreign
     *
     * @return $this
     */
    public function setFxRateToForeign($fx_rate_to_foreign)
    {
        $this->container['fx_rate_to_foreign'] = $fx_rate_to_foreign;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date delivery_date
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets exported_to_connector
     *
     * @return bool
     */
    public function getExportedToConnector()
    {
        return $this->container['exported_to_connector'];
    }

    /**
     * Sets exported_to_connector
     *
     * @param bool $exported_to_connector exported_to_connector
     *
     * @return $this
     */
    public function setExportedToConnector($exported_to_connector)
    {
        $this->container['exported_to_connector'] = $exported_to_connector;

        return $this;
    }

    /**
     * Gets payment_links
     *
     * @return \Swagger\Client\Model\PaymentLink[]
     */
    public function getPaymentLinks()
    {
        return $this->container['payment_links'];
    }

    /**
     * Sets payment_links
     *
     * @param \Swagger\Client\Model\PaymentLink[] $payment_links payment_links
     *
     * @return $this
     */
    public function setPaymentLinks($payment_links)
    {
        $this->container['payment_links'] = $payment_links;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets analytic_cost_bearer
     *
     * @return string
     */
    public function getAnalyticCostBearer()
    {
        return $this->container['analytic_cost_bearer'];
    }

    /**
     * Sets analytic_cost_bearer
     *
     * @param string $analytic_cost_bearer analytic_cost_bearer
     *
     * @return $this
     */
    public function setAnalyticCostBearer($analytic_cost_bearer)
    {
        $this->container['analytic_cost_bearer'] = $analytic_cost_bearer;

        return $this;
    }

    /**
     * Gets analytic_cost_center
     *
     * @return string
     */
    public function getAnalyticCostCenter()
    {
        return $this->container['analytic_cost_center'];
    }

    /**
     * Sets analytic_cost_center
     *
     * @param string $analytic_cost_center analytic_cost_center
     *
     * @return $this
     */
    public function setAnalyticCostCenter($analytic_cost_center)
    {
        $this->container['analytic_cost_center'] = $analytic_cost_center;

        return $this;
    }

    /**
     * Gets accountant_verification_needed
     *
     * @return bool
     */
    public function getAccountantVerificationNeeded()
    {
        return $this->container['accountant_verification_needed'];
    }

    /**
     * Sets accountant_verification_needed
     *
     * @param bool $accountant_verification_needed accountant_verification_needed
     *
     * @return $this
     */
    public function setAccountantVerificationNeeded($accountant_verification_needed)
    {
        $this->container['accountant_verification_needed'] = $accountant_verification_needed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


