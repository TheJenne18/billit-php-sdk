<?php
/**
 * AccountInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Billit.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountInformation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'companies' => '\Swagger\Client\Model\Party[]',
        'user_company_roles' => '\Swagger\Client\Model\UserCompanyRole[]',
        'external_provider_id' => 'string',
        'external_provider_tc' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'login_or_register_needed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => null,
        'companies' => null,
        'user_company_roles' => null,
        'external_provider_id' => null,
        'external_provider_tc' => null,
        'first_name' => null,
        'last_name' => null,
        'login_or_register_needed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'Email',
        'companies' => 'Companies',
        'user_company_roles' => 'UserCompanyRoles',
        'external_provider_id' => 'ExternalProviderID',
        'external_provider_tc' => 'ExternalProviderTC',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'login_or_register_needed' => 'LoginOrRegisterNeeded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'companies' => 'setCompanies',
        'user_company_roles' => 'setUserCompanyRoles',
        'external_provider_id' => 'setExternalProviderId',
        'external_provider_tc' => 'setExternalProviderTc',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'login_or_register_needed' => 'setLoginOrRegisterNeeded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'companies' => 'getCompanies',
        'user_company_roles' => 'getUserCompanyRoles',
        'external_provider_id' => 'getExternalProviderId',
        'external_provider_tc' => 'getExternalProviderTc',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'login_or_register_needed' => 'getLoginOrRegisterNeeded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['companies'] = isset($data['companies']) ? $data['companies'] : null;
        $this->container['user_company_roles'] = isset($data['user_company_roles']) ? $data['user_company_roles'] : null;
        $this->container['external_provider_id'] = isset($data['external_provider_id']) ? $data['external_provider_id'] : null;
        $this->container['external_provider_tc'] = isset($data['external_provider_tc']) ? $data['external_provider_tc'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['login_or_register_needed'] = isset($data['login_or_register_needed']) ? $data['login_or_register_needed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets companies
     *
     * @return \Swagger\Client\Model\Party[]
     */
    public function getCompanies()
    {
        return $this->container['companies'];
    }

    /**
     * Sets companies
     *
     * @param \Swagger\Client\Model\Party[] $companies companies
     *
     * @return $this
     */
    public function setCompanies($companies)
    {
        $this->container['companies'] = $companies;

        return $this;
    }

    /**
     * Gets user_company_roles
     *
     * @return \Swagger\Client\Model\UserCompanyRole[]
     */
    public function getUserCompanyRoles()
    {
        return $this->container['user_company_roles'];
    }

    /**
     * Sets user_company_roles
     *
     * @param \Swagger\Client\Model\UserCompanyRole[] $user_company_roles user_company_roles
     *
     * @return $this
     */
    public function setUserCompanyRoles($user_company_roles)
    {
        $this->container['user_company_roles'] = $user_company_roles;

        return $this;
    }

    /**
     * Gets external_provider_id
     *
     * @return string
     */
    public function getExternalProviderId()
    {
        return $this->container['external_provider_id'];
    }

    /**
     * Sets external_provider_id
     *
     * @param string $external_provider_id external_provider_id
     *
     * @return $this
     */
    public function setExternalProviderId($external_provider_id)
    {
        $this->container['external_provider_id'] = $external_provider_id;

        return $this;
    }

    /**
     * Gets external_provider_tc
     *
     * @return string
     */
    public function getExternalProviderTc()
    {
        return $this->container['external_provider_tc'];
    }

    /**
     * Sets external_provider_tc
     *
     * @param string $external_provider_tc external_provider_tc
     *
     * @return $this
     */
    public function setExternalProviderTc($external_provider_tc)
    {
        $this->container['external_provider_tc'] = $external_provider_tc;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets login_or_register_needed
     *
     * @return bool
     */
    public function getLoginOrRegisterNeeded()
    {
        return $this->container['login_or_register_needed'];
    }

    /**
     * Sets login_or_register_needed
     *
     * @param bool $login_or_register_needed login_or_register_needed
     *
     * @return $this
     */
    public function setLoginOrRegisterNeeded($login_or_register_needed)
    {
        $this->container['login_or_register_needed'] = $login_or_register_needed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


